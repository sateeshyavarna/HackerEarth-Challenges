{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"airplane_Severity","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"498g23ETB6nx","colab_type":"text"},"source":["**Connection  to Google Drive**\n"]},{"cell_type":"code","metadata":{"id":"kGSr6fPRi_VE","colab_type":"code","colab":{}},"source":["from IPython.core.interactiveshell import InteractiveShell\n","InteractiveShell.ast_node_interactivity = \"all\""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZZhkKW00Rfx5","colab_type":"code","colab":{}},"source":["# https://github.com/hemanth171/Airplane_Accidents_Severity_Prediction/blob/master/Severity_Prediction_of_Flight_accidents.ipynb"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"g-Iiyn4oCvRn","colab_type":"code","colab":{}},"source":["def display_side_by_side(dfs:list, captions:list):\n","    output = \"\"\n","    combined = dict(zip(captions, dfs))\n","    for caption, df in combined.items():\n","        output += df.style.set_table_attributes(\"style='display:inline-block'\").set_caption(caption)._repr_html_()\n","        output += \"\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\"\n","    display(HTML(output))\n","\n","def get_model_performance(y_test,_y_pred):\n","  crosstab = pd.crosstab(y_test, _y_pred, rownames=['Actual Species'], colnames=['Predicted Species'])\n","  report = pd.DataFrame(classification_report(y_test, _y_pred,output_dict=True)).transpose()\n","  display_side_by_side([crosstab, report], ['<b>Confusion Matrix<b>', '<b>Classification Report</b>'])\n","\n","def print_predictions(fileName,test,clf):\n","  from google.colab import files\n","  inv_cleanup_Severity = {\"Severity\":{v: k for k, v in cleanup_Severity['Severity'].items()}}\n","  predictions = clf.predict(test.drop(['Accident_ID'],axis=1))\n","  result = pd.DataFrame({'Accident_ID':test['Accident_ID'],'Severity':predictions})\n","  result.replace(inv_cleanup_Severity, inplace=True)\n","  result.to_csv(fileName + '.csv', index=False)\n","  files.download(fileName + '.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bbq-tQ_1j8HU","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.preprocessing import LabelEncoder\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report,f1_score\n","from IPython.display import display_html,display,HTML\n","% matplotlib inline"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wJlZNC8ceTul","colab_type":"code","colab":{}},"source":["# Code to read csv file into Colaboratory:\n","!pip install -U -q PyDrive\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials\n","# Authenticate and create the PyDrive client.\n","auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZmMF5KFkfnYs","colab_type":"code","colab":{}},"source":["def get_data(link,fileName):\n","  import pandas as pd\n","  fluff, id = link.split('=')\n","  downloaded = drive.CreateFile({'id':id}) \n","  downloaded.GetContentFile(fileName)  \n","  return pd.read_csv(fileName)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RQhBAwRWedh6","colab_type":"code","colab":{}},"source":["link_train = 'https://drive.google.com/open?id=11oFHxSXy6YFXiQnvMsnXFhr3Qfuui1sy'\n","link_test = \"https://drive.google.com/open?id=11n4uWRgIoHPoemivmB_RjLoQdnta2rBl\"\n","link_sample = \"https://drive.google.com/open?id=11muMVuvk7CHfigyp_h1dkgHe9MOcDhT0\"\n","train_raw,test_raw,sample_raw = get_data(link_train,\"train.csv\"),get_data(link_test,\"test.csv\"),get_data(link_sample,\"sample_submission.csv\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JbKiGVgPi09h","colab_type":"code","colab":{}},"source":["train,test,sample = train_raw.copy(),test_raw.copy(),sample_raw.copy()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oNbZ09R3guh2","colab_type":"code","colab":{}},"source":["train.head()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8tX-CnuHg_3g","colab_type":"code","colab":{}},"source":["test.head()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gP8At-8qhB9L","colab_type":"code","colab":{}},"source":["sample.head()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"b0j1zq97buKG","colab_type":"text"},"source":["#### Describing Data"]},{"cell_type":"code","metadata":{"id":"yTm2_cOThB_z","colab_type":"code","colab":{}},"source":["%%time\n","train.isnull().sum()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VplO8XYihCF0","colab_type":"code","colab":{}},"source":["train.dtypes"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oXpjAPunk1vs","colab_type":"code","colab":{}},"source":["train.columns"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"olaGeJUXnW-o","colab_type":"code","colab":{}},"source":["train.Severity.value_counts()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9o3dVcygk5Xp","colab_type":"code","colab":{}},"source":["train.Days_Since_Inspection.value_counts()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BxyWWD-gk5gy","colab_type":"code","colab":{}},"source":["train.Accident_Type_Code.value_counts()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"y0U3wmcCk5it","colab_type":"code","colab":{}},"source":["train.Violations.value_counts()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"G3Io0f86_wDV","colab_type":"code","colab":{}},"source":["train.Severity.value_counts()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7Qq6VPjXCd08","colab_type":"text"},"source":["### Visualisation Methods"]},{"cell_type":"code","metadata":{"id":"GqO8kKEs8t2M","colab_type":"code","colab":{}},"source":["# plt.xticks(rotation=45)\n","fig,ax = plt.subplots(2,2,figsize=(16,8))\n","# ax.tick_params(axis='x', rotation=45)\n","ax1,ax2,ax3,ax4 = ax.flatten()\n","ax3.xaxis.set_tick_params(rotation=8)\n","sns.countplot(train['Violations'],palette='Blues',ax=ax1)\n","sns.countplot(train['Accident_Type_Code'],palette='Blues',ax=ax2)\n","sns.countplot(train['Severity'],palette='Blues',ax=ax3)\n","sns.countplot(train['Days_Since_Inspection'],palette='Blues',ax=ax4)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"m_R0jNOkjv8R","colab_type":"code","colab":{}},"source":["fig,ax = plt.subplots(1,4,figsize=(28,6))\n","ax1,ax2,ax3,ax4 = ax.flatten()\n","ax1.xaxis.set_tick_params(rotation=10)\n","ax2.xaxis.set_tick_params(rotation=10)\n","ax3.xaxis.set_tick_params(rotation=10)\n","ax4.xaxis.set_tick_params(rotation=10)\n","sns.distplot(train['Safety_Score'],bins=20,color='r',ax=ax1)\n","sns.boxplot(y='Safety_Score',x='Severity',data=train,ax=ax2)\n","sns.pointplot(y='Safety_Score',x='Severity',data=train,ax=ax3)\n","sns.violinplot(y='Safety_Score',x='Severity',data=train,ax=ax4)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tQvj10dwjv_J","colab_type":"code","colab":{}},"source":["fig,ax = plt.subplots(1,4,figsize=(28,6))\n","ax1,ax2,ax3,ax4 = ax.flatten()\n","ax1.xaxis.set_tick_params(rotation=10)\n","ax2.xaxis.set_tick_params(rotation=10)\n","ax3.xaxis.set_tick_params(rotation=10)\n","ax4.xaxis.set_tick_params(rotation=10)\n","sns.distplot(train['Control_Metric'],bins=20,color='r',ax=ax1)\n","sns.boxplot(y='Control_Metric',x='Severity',data=train,ax=ax2)\n","sns.pointplot(y='Control_Metric',x='Severity',data=train,ax=ax3)\n","sns.violinplot(y='Control_Metric',x='Severity',data=train,ax=ax4)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y81eccASjwBq","colab_type":"code","colab":{}},"source":["fig,ax = plt.subplots(1,4,figsize=(28,6))\n","ax1,ax2,ax3,ax4 = ax.flatten()\n","ax1.xaxis.set_tick_params(rotation=10)\n","ax2.xaxis.set_tick_params(rotation=10)\n","ax3.xaxis.set_tick_params(rotation=10)\n","ax4.xaxis.set_tick_params(rotation=10)\n","sns.distplot(train['Turbulence_In_gforces'],bins=20,color='r',ax=ax1)\n","sns.boxplot(y='Turbulence_In_gforces',x='Severity',data=train,ax=ax2)\n","sns.pointplot(y='Turbulence_In_gforces',x='Severity',data=train,ax=ax3)\n","sns.violinplot(y='Turbulence_In_gforces',x='Severity',data=train,ax=ax4)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ewprb_VJjwD0","colab_type":"code","colab":{}},"source":["fig,ax = plt.subplots(1,4,figsize=(28,6))\n","ax1,ax2,ax3,ax4 = ax.flatten()\n","ax1.xaxis.set_tick_params(rotation=10)\n","ax2.xaxis.set_tick_params(rotation=10)\n","ax3.xaxis.set_tick_params(rotation=10)\n","ax4.xaxis.set_tick_params(rotation=10)\n","sns.distplot(train['Cabin_Temperature'],bins=20,color='r',ax=ax1)\n","sns.boxplot(y='Cabin_Temperature',x='Severity',data=train,ax=ax2)\n","sns.pointplot(y='Cabin_Temperature',x='Severity',data=train,ax=ax3)\n","sns.violinplot(y='Cabin_Temperature',x='Severity',data=train,ax=ax4)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"53OVrWQwjwGW","colab_type":"code","colab":{}},"source":["fig,ax = plt.subplots(1,4,figsize=(28,6))\n","ax1,ax2,ax3,ax4 = ax.flatten()\n","ax1.xaxis.set_tick_params(rotation=10)\n","ax2.xaxis.set_tick_params(rotation=10)\n","ax3.xaxis.set_tick_params(rotation=10)\n","ax4.xaxis.set_tick_params(rotation=10)\n","sns.distplot(train['Max_Elevation'],bins=20,color='r',ax=ax1)\n","sns.boxplot(y='Max_Elevation',x='Severity',data=train,ax=ax2)\n","sns.pointplot(y='Max_Elevation',x='Severity',data=train,ax=ax3)\n","sns.violinplot(y='Max_Elevation',x='Severity',data=train,ax=ax4)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gWjrsHQajwKD","colab_type":"code","colab":{}},"source":["fig,ax = plt.subplots(2,3,figsize=(16,8))\n","ax1,ax2,ax3,ax4,ax5,ax6 = ax.flatten()\n","ax4.xaxis.set_tick_params(rotation=10)\n","ax6.xaxis.set_tick_params(rotation=10)\n","ax3.xaxis.set_tick_params(rotation=5)\n","sns.distplot(train['Adverse_Weather_Metric'],bins=20,color='r',ax=ax1)\n","sns.boxplot(y='Adverse_Weather_Metric',data=train,ax=ax2)\n","sns.boxplot(y='Adverse_Weather_Metric',x='Severity',data=train,ax=ax3)\n","sns.pointplot(y='Adverse_Weather_Metric',x='Severity',data=train,ax=ax4)\n","sns.violinplot(y='Adverse_Weather_Metric',data=train,ax=ax5)\n","sns.violinplot(y='Adverse_Weather_Metric',x='Severity',data=train,ax=ax6)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1iYto_n6ZR9A","colab_type":"code","colab":{}},"source":["fig,ax = plt.subplots(2,3,figsize=(16,8))\n","ax1,ax2,ax3,ax4,ax5,ax6 = ax.flatten()\n","ax4.xaxis.set_tick_params(rotation=10)\n","ax6.xaxis.set_tick_params(rotation=10)\n","ax3.xaxis.set_tick_params(rotation=5)\n","sns.distplot(train['Total_Safety_Complaints'],bins=20,color='r',ax=ax1)\n","sns.boxplot(y='Total_Safety_Complaints',data=train,ax=ax2)\n","sns.boxplot(y='Total_Safety_Complaints',x='Severity',data=train,ax=ax3)\n","sns.pointplot(y='Total_Safety_Complaints',x='Severity',data=train,ax=ax4)\n","sns.violinplot(y='Total_Safety_Complaints',data=train,ax=ax5)\n","sns.violinplot(y='Total_Safety_Complaints',x='Severity',data=train,ax=ax6)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fe9KALQ5FneF","colab_type":"code","colab":{}},"source":["# HeatMap of the Corrleation\n","cor = train.corr()\n","plt.figure(figsize=(12,8))\n","sns.heatmap(cor,cmap='Set1',annot=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6Qvpud0tXJZS","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XN6no3hxXJbw","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"IEO-74FMXJf4","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zJr-Rqa1XJrE","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"AhZvVBTBXJoB","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aKdJD5xJXJmF","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CYKGkMWuXJkI","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"AktfB1jrXJio","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ovpbI0RWXJei","colab_type":"code","colab":{}},"source":["train.columns"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"k8G-JFMxo31b","colab_type":"text"},"source":["### Feature Engineering"]},{"cell_type":"code","metadata":{"id":"fzakhOhdpz8G","colab_type":"code","colab":{}},"source":["def detect_outlier(data):\n","    col_data= data\n","    sorted(col_data)\n","    q1, q3= np.percentile(col_data,[25,75])\n","    iqr = q3 - q1\n","    lower_bound = q1 -(1.5 * iqr) \n","    upper_bound = q3 +(1.5 * iqr) \n","    lower_bound = data.min() if lower_bound < data.min() else lower_bound\n","    upper_bound = data.max() if upper_bound > data.max() else upper_bound\n","    return lower_bound,upper_bound\n","\n","def oneHotEncodingOfVariable(data,colsToEncode):\n","    import pandas as pd\n","    for col in colsToEncode:\n","        data = pd.get_dummies(data, columns= [col], prefix=[col], prefix_sep='_')\n","    return data"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GW25KBmfpsjs","colab_type":"code","colab":{}},"source":["cleanup_Severity = {\"Severity\": {\"Highly_Fatal_And_Damaging\": 0, \"Significant_Damage_And_Serious_Injuries\": 1,\"Minor_Damage_And_Injuries\":2,\"Significant_Damage_And_Fatalities\":3}}\n","\n","def feature_engineering(df,train_df = True):\n","\n","  from sklearn.preprocessing import MinMaxScaler\n","\n","  # Label Encoding for the 'Severity' Variable\n","  df.replace(cleanup_Severity, inplace=True)\n","  \n","  # df = oneHotEncodingOfVariable(df,['Accident_Type_Code','Violations'])\n","\n","  # # getting lower and upper boundary and outlier treatment for 'Adverse_Weather_Metric' variable\n","  # adw_lower,adw_upper = detect_outlier(df['Adverse_Weather_Metric'])\n","  # df.loc[df['Adverse_Weather_Metric'] > adw_upper,'Adverse_Weather_Metric'] = adw_upper\n","  # df.loc[df['Adverse_Weather_Metric'] < adw_lower,'Adverse_Weather_Metric'] = adw_lower\n","\n","  # # getting lower and upper boundary and outlier treatment for 'Total_Safety_Complaints' variable\n","  # tsc_lower,tsc_upper = detect_outlier(df['Total_Safety_Complaints'])\n","  # df.loc[df['Total_Safety_Complaints'] > tsc_upper,'Total_Safety_Complaints'] = tsc_upper\n","  # df.loc[df['Total_Safety_Complaints'] < tsc_lower,'Total_Safety_Complaints'] = tsc_lower\n","\n","  # if train_df == True:\n","  #   X_numerical = df.drop(['Severity','Accident_ID','Accident_Type_Code','Violations'],axis=1)\n","  # else:\n","  #   X_numerical = df.drop(['Accident_ID','Accident_Type_Code','Violations'],axis=1)\n","\n","  # X_categorical = df[['Accident_Type_Code','Violations']]\n","  # X_ID = df[['Accident_ID']]\n","\n","  # # Instantiate MinMaxScaler and use it to rescale X_train and X_test\n","  # scaler = MinMaxScaler(feature_range=(0,1))\n","  # rescaledX=scaler.fit_transform(X_numerical)\n","  \n","  # y = train['Severity']\n","\n","  # X_numerical = (X_numerical - X_numerical.mean()) / X_numerical.std()\n","  # if train_df == True:\n","  #   df = pd.concat([y, pd.DataFrame(rescaledX,columns=X_numerical.columns),X_categorical,X_ID], axis=1)\n","  # else:\n","  #   df = pd.concat([pd.DataFrame(rescaledX,columns=X_numerical.columns),X_categorical,X_ID], axis=1)\n","  return df"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"W11arKl6psd6","colab_type":"code","colab":{}},"source":["train = feature_engineering(train,True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"m1uhOKddyJqp","colab_type":"code","colab":{}},"source":["test = feature_engineering(test,False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"99Oxg8ra2eeX","colab_type":"code","colab":{}},"source":["train.columns"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"31xR3ccfjkEN","colab_type":"code","colab":{}},"source":["train.dtypes"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FF6fvus4OJME","colab_type":"code","colab":{}},"source":["train.head()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-SmxwM41XO6v","colab_type":"code","colab":{}},"source":["# x_melted = pd.melt(train,id_vars='Severity',\n","#                     var_name='features',\n","#                     value_name='value')\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ntPvPOkmYSX9","colab_type":"code","colab":{}},"source":["# x_melted"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0Sg9AqOYXO05","colab_type":"code","colab":{}},"source":["# plt.figure(figsize=(15,10))\n","# sns.violinplot(x=\"features\", y=\"value\", hue=\"Severity\", data=x_melted, inner=\"quart\")\n","# plt.xticks(rotation=45)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"orTX4THGHxYI","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"29ocXtWUjPKn","colab_type":"code","colab":{}},"source":["X = train.drop(['Severity','Accident_ID'],axis=1)\n","y = train['Severity']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SoO6qUwFJm1P","colab_type":"code","colab":{}},"source":["train.shape"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SgrqcYBGKbxu","colab_type":"code","colab":{}},"source":["# np.random.seed(2020)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5I5F31MhJaqy","colab_type":"code","colab":{}},"source":["# train_model, validation, hold_out = np.split(train, [int(.7*len(train)), int(.9*len(train))])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mYGr2ZK2Jxc-","colab_type":"code","colab":{}},"source":["# train_model.shape, validation.shape, hold_out.shape "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"p2s9JIVcKV9v","colab_type":"code","colab":{}},"source":["# train_model.head(10)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9sYZ1ydKXOzZ","colab_type":"code","colab":{}},"source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=2020)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"b9kE1K5R7Mu8","colab_type":"text"},"source":["### Multi Class Classification Models"]},{"cell_type":"markdown","metadata":{"id":"3S01qzdCWr2k","colab_type":"text"},"source":["#### Select K Best Features"]},{"cell_type":"code","metadata":{"id":"1e8oRS2igab4","colab_type":"code","colab":{}},"source":["def get_best_features(X,y):\n","  from sklearn.feature_selection import SelectKBest\n","  from sklearn.feature_selection import chi2\n","\n","  # Select best scored 5 features\n","  select_features = SelectKBest(chi2, k=5).fit(X, y)\n","  features_scores = pd.DataFrame({'Feature': X.columns, 'Score': select_features.scores_})\n","  features_scores.sort_values(by=['Score'],ascending=False)\n","  print(features_scores)\n","  cols = select_features.get_support(indices=True)\n","  column_names = X.columns[cols].values\n","  return column_names"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"IXsJiAFufIrb","colab_type":"code","colab":{}},"source":["best_features = get_best_features(X_train,y_train)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dhzNIU1bj4Qo","colab_type":"code","colab":{}},"source":["X_train_best = X_train[best_features]\n","X_train_best.head()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qGDzBiHJmE5s","colab_type":"text"},"source":["#### Recursive feature elimination and cross-validation"]},{"cell_type":"code","metadata":{"id":"FFRb6gV_mOs8","colab_type":"code","colab":{}},"source":["from sklearn.feature_selection import RFECV\n","\n","rf_rfecv = RandomForestClassifier()\n","rfecv = RFECV(estimator=rd_rfecv, step=1, cv=5,scoring=my_scorer)\n","rfecv = rfecv.fit(X_train, y_train)\n","\n","print('Optimal number of features: ', rfecv.n_features_)\n","print('Best features: ', X_train.columns[rfecv.support_])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"AS00C01cmOxF","colab_type":"code","colab":{}},"source":["# Plot number of features vs cross-validation scores\n","plt.figure()\n","plt.xlabel('Number of features selected')\n","plt.ylabel('cross validation scores of selected features')\n","plt.plot(range(1, len(rfecv.grid_scores_) + 1), rfecv.grid_scores_)\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6kCZItP3rgLk","colab_type":"text"},"source":["#### Random Forest Importance of Features"]},{"cell_type":"code","metadata":{"id":"qrPfKe-Fp5GK","colab_type":"code","colab":{}},"source":["clf_rf_4 = RandomForestClassifier()\n","clf_rf_4 = clf_rf_4.fit(x_train, y_train)\n","importances = clf_rf_4.feature_importances_\n","std = np.std([tree.feature_importances_ for tree in clf_rf_4.estimators_], axis=0)\n","indices = np.argsort(importances)[::-1]\n","for f in range(X_train.shape[1]):\n","    print('feature importance of %s is (%f)' % (X_train.columns[indices[f]], importances[indices[f]]))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"y_5ajtA_p541","colab_type":"code","colab":{}},"source":["plt.figure(1, figsize=(12,10))\n","plt.title('Feature Importances')\n","plt.bar(range(X_train.shape[1]), importances[indices], color=\"g\", yerr=std[indices], align=\"center\")\n","plt.xticks(range(X_train.shape[1]), X_train.columns[indices], rotation=90)\n","plt.xlim([-1, X_train.shape[1]])\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9n80ZGF2p6H6","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DkFPIL0Rp6Ws","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FJxUTc_3mOvm","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hNdDujxdoeU2","colab_type":"text"},"source":["#### KNN Model"]},{"cell_type":"code","metadata":{"id":"3xEMXQXKyJcy","colab_type":"code","colab":{}},"source":["# Multi Class Classification\n","from sklearn.neighbors import KNeighborsClassifier\n","knn_classifier = KNeighborsClassifier()\n","knn_classifier.fit(X_train, y_train)\n","knn_predictions = knn_classifier.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R-WcfhBeyJLJ","colab_type":"code","colab":{}},"source":["get_model_performance(y_test,knn_predictions)\n","print(100*(f1_score(y_test,knn_predictions,average=\"weighted\")))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"S1YwouEzL0vG","colab_type":"code","colab":{}},"source":["print_predictions(\"KNN_Predictions\",test,knn_classifier)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"cW-jskrGad4W","colab_type":"code","colab":{}},"source":["# # plotting fitted line\n","# plt.scatter(df.Hours_Studied, y, color='black')\n","# plt.yticks([0.0, 0.5, 1.0])\n","plt.plot(df.Hours_Studied, model.predict_proba(x)[:,1], color='blue',linewidth=3)\n","plt.title('Hours Studied vs Result')\n","plt.ylabel('Result')\n","plt.xlabel('Hours_Studied')\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AcBmNyAWolND","colab_type":"text"},"source":["#### Random Forest Model"]},{"cell_type":"markdown","metadata":{"id":"xpjTYoXLkJkN","colab_type":"text"},"source":["##### Random Forest With all Features"]},{"cell_type":"code","metadata":{"id":"OgFuFObzyJI-","colab_type":"code","colab":{}},"source":["from sklearn.ensemble import RandomForestClassifier\n","rf_classifier = RandomForestClassifier()\n","rf_classifier.fit(X_train, y_train)\n","rf_predictions = rf_classifier.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eVmE-Mc5yJHS","colab_type":"code","colab":{}},"source":["get_model_performance(y_test,rf_predictions)\n","print(100*(f1_score(y_test,rf_predictions,average=\"weighted\")))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jwtqV9K8n3mE","colab_type":"code","colab":{}},"source":["print_predictions(\"RF_Predictions\",test,rf_classifier)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"f57ZdkTpkTwg","colab_type":"text"},"source":["##### Random Forest With 5 Best Features"]},{"cell_type":"code","metadata":{"id":"fam5o0vGkXsx","colab_type":"code","colab":{}},"source":["from sklearn.ensemble import RandomForestClassifier\n","rf_classifier_best = RandomForestClassifier()\n","rf_classifier_best.fit(X_train_best, y_train)\n","rf_best_predictions = rf_classifier_best.predict(X_test[X_train_best.columns])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_j-CL-UjkXxh","colab_type":"code","colab":{}},"source":["get_model_performance(y_test,rf_best_predictions)\n","print(100*(f1_score(y_test,rf_best_predictions,average=\"weighted\")))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NMIfSsZEkXqn","colab_type":"code","colab":{}},"source":["print_predictions(\"RF_Predictions\",test,rf_classifier)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WPV6H1PvR6Y9","colab_type":"text"},"source":["#### Random Forest With Grid Search and Stratified Kfold Cross Validation"]},{"cell_type":"code","metadata":{"id":"8aLi8BItR5cc","colab_type":"code","colab":{}},"source":["from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics.scorer import make_scorer\n","from sklearn.model_selection import GridSearchCV\n","\n","rf_grid_classifier = RandomForestClassifier()\n","\n","parameters = { \n","    'n_estimators': [100,200,300,400,500,600,700,800,900,1000],\n","    'max_features': ['log2'],\n","     'max_depth': [15, 10],\n","     'criterion': ['entropy', 'gini'],\n","    'n_jobs':[-1]\n","}\n","def get_Model_score(y_test,y_pred):\n","  return 100*(f1_score(y_test,y_pred,average=\"weighted\"))\n","\n","my_scorer = make_scorer(get_Model_score, greater_is_better=True)\n","# Run the grid search\n","grid_obj = GridSearchCV(rf_grid_classifier, parameters, scoring=my_scorer)\n","grid_obj = grid_obj.fit(X_train,y_train)\n","\n","\n","# Set the clf to the best combination of parameters\n","rf_grid_classifier = grid_obj.best_estimator_"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Dvh728HZTYza","colab_type":"code","colab":{}},"source":["best_score, best_params = grid_obj.best_score_,grid_obj.best_params_\n","print(\"Best: %f using %s\" % (best_score, best_params))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TOay_hMnTc8t","colab_type":"code","colab":{}},"source":["# Fit the best algorithm to the data. \n","rf_grid_classifier.fit(X_train, y_train)\n","#Prediction\n","rf_grid_predictions = rf_grid_classifier.predict(X_test)\n","print(get_Model_score(y_test, rf_grid_predictions))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eyPIXRakrO2l","colab_type":"code","colab":{}},"source":["print_predictions(\"rf_best_param_predictions\",test,rf_grid_classifier)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"H5hIRoUxTg1t","colab_type":"code","colab":{}},"source":["from sklearn.model_selection import StratifiedKFold\n","\n","def run_kfold(clf,X_train,y_train):\n","    kf = StratifiedKFold(n_splits=10,shuffle=True,random_state=2020)\n","    outcomes = []\n","    fold = 0\n","    for train_index, test_index in kf.split(X_train,y_train):\n","         fold+=1\n","         xtr,xvl = X.loc[train_index],X.loc[test_index]\n","         ytr,yvl = y.loc[train_index],y.loc[test_index]\n","         clf.fit(xtr,ytr)\n","         y_pred = clf.predict(xvl)\n","         accuracy = get_Model_score(yvl, y_pred)\n","         outcomes.append(accuracy)\n","         print(\"Fold {0} accuracy: {1}\".format(fold, accuracy))     \n","    mean_outcome = np.mean(outcomes)\n","    print(\"Mean Accuracy: {0}\".format(mean_outcome)) \n","\n","run_kfold(rf_grid_classifier,X_train,y_train)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"AJsTlASFnslJ","colab_type":"code","colab":{}},"source":["print_predictions(\"rf_kfold_predictions\",test,rf_grid_classifier)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EcL8qsfuoqta","colab_type":"text"},"source":["#### One Vs Rest Random Forest Classifier"]},{"cell_type":"code","metadata":{"id":"HyNo_IpcE1gN","colab_type":"code","colab":{}},"source":["from sklearn.multiclass import OneVsRestClassifier\n","rf_ors_classifier = OneVsRestClassifier(RandomForestClassifier())\n","rf_ors_classifier.fit(np.array(X_train), y_train)\n","rf_ors_predictions = rf_ors_classifier.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5QDBMA_oE1ia","colab_type":"code","colab":{}},"source":["get_model_performance(y_test,rf_ors_predictions)\n","print(100*(f1_score(y_test,rf_ors_predictions,average=\"weighted\")))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JYe-8cz7oDWq","colab_type":"code","colab":{}},"source":["print_predictions(\"ORS_RF_Predictions\",test,rf_ors_classifier)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nfini_cT8VP9","colab_type":"text"},"source":["#### Voting Classifier"]},{"cell_type":"code","metadata":{"id":"dcOkKFoy8X04","colab_type":"code","colab":{}},"source":["# Voting Classifier\n","\n","from sklearn.ensemble import VotingClassifier\n","\n","voting_clf = VotingClassifier(\n","    estimators=[('knn', knn_classifier), ('rf', rf_classifier), ('ors_rf', rf_ors_classifier)],voting='soft')\n","voting_clf.fit(X_train, y_train)\n","\n","from sklearn.metrics import accuracy_score\n","for clf in (knn_classifier, rf_classifier, rf_ors_classifier, voting_clf):\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","    print(clf.__class__.__name__, 100*(f1_score(y_test,y_pred,average=\"weighted\")))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6t3C9Y3yBeco","colab_type":"text"},"source":["#### KFold Cross Validation Random Forest"]},{"cell_type":"code","metadata":{"id":"DKK2-d4EBdxk","colab_type":"code","colab":{}},"source":["from sklearn.model_selection import StratifiedKFold\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.linear_model import LogisticRegression\n","kf = StratifiedKFold(n_splits=5,shuffle=True,random_state=2020)\n","pred_test_full =0\n","cv_score =[]\n","i=1\n","for train_index,test_index in kf.split(X_train,y_train):\n","    print('{} of KFold {}'.format(i,kf.n_splits))\n","    xtr,xvl = X.loc[train_index],X.loc[test_index]\n","    ytr,yvl = y.loc[train_index],y.loc[test_index]\n","    \n","    #model\n","    rf_classifier = RandomForestClassifier()\n","    rf_classifier.fit(xtr,ytr)\n","    y_pred = rf_classifier.predict(xvl)\n","    get_model_performance(yvl,y_pred)\n","    cv_score.append(score)    \n","    pred_test = lr.predict_proba(X_test)[:,1]\n","    pred_test_full +=pred_test\n","    i+=1\n","    "],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FadlhQgJOT1J","colab_type":"text"},"source":["#### XGB Model"]},{"cell_type":"code","metadata":{"id":"Wph4fOS8Bd4C","colab_type":"code","colab":{}},"source":["from xgboost import XGBClassifier\n","\n","# Create a classifier\n","xgb = XGBClassifier(booster='gbtree', objective='multi:softprob', random_state=42, eval_metric=\"auc\", num_class=4)\n","\n","# Fit the classifier with the training data\n","xgb.fit(X_train,y_train)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VsXUbHkXBdva","colab_type":"code","colab":{}},"source":["from sklearn import preprocessing\n","\n","# Use trained model to predict output of test dataset\n","val = xgb.predict(X_test)\n","\n","\n","get_model_performance(y_test,val)\n","print(100*(f1_score(y_test,val,average=\"weighted\")))\n","# roc_auc_score(y_test, val, average='macro')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XoEoytSXOcKb","colab_type":"code","colab":{}},"source":["print_predictions(\"XGB Classifier\",test,xgb)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LrWmZXC2iGPg","colab_type":"text"},"source":["#### Catboost Classifier\n"]},{"cell_type":"code","metadata":{"id":"bEqCoUG2iG1c","colab_type":"code","colab":{}},"source":["!pip install catboost\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"druTYPJ2iuCC","colab_type":"code","colab":{}},"source":["X_train.columns"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QPY5haq3jLEv","colab_type":"code","colab":{}},"source":["X_train.dtypes"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_S_fI-uMiG5v","colab_type":"code","colab":{}},"source":["from catboost import CatBoostClassifier\n","from sklearn.model_selection import StratifiedKFold\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"Kz8UEfPqnTzA","colab":{}},"source":["# convert categorical columns to integers\n","cat_dims = ['Accident_Type_Code','Violations']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6quk37zOyC09","colab_type":"code","colab":{}},"source":["model = CatBoostClassifier(eval_metric='Accuracy',\n","                           use_best_model=True,\n","                           random_seed=42)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"p8Ua5l3gx_FX","colab_type":"code","colab":{}},"source":["model.fit(X_train,\n","          y_train,\n","          cat_features=cat_dims,\n","          eval_set=(X_test,y_test))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_z58Yf1Uz92c","colab_type":"code","colab":{}},"source":[" from google.colab import files\n","inv_cleanup_Severity = {\"Severity\":{v: k for k, v in cleanup_Severity['Severity'].items()}}\n","predictions = model.predict(test.drop(['Accident_ID'],axis=1))\n","result = pd.DataFrame({'Accident_ID':test['Accident_ID'],'Severity':np.ravel(predictions)})\n","result.replace(inv_cleanup_Severity, inplace=True)\n","result.to_csv(\"cat_predictions\" + '.csv', index=False)\n","files.download(\"cat_predictions\" + '.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"hZA-GaLvnTE4","colab":{}},"source":["# rf_classifier = RandomForestClassifier()\n","#     rf_classifier.fit(xtr,ytr)\n","#     y_pred = rf_classifier.predict(xvl)\n","#     get_model_performance(yvl,y_pred)\n","#     cv_score.append(score)    \n","#     pred_test = lr.predict_proba(X_test)[:,1]\n","#     pred_test_full +=pred_test\n","#     i+=1\n","\n","def run_kfold_stratified(clf,X_train,y_train):\n","    kf = StratifiedKFold(n_splits=10,shuffle=True,random_state=2020)\n","    outcomes = []\n","    fold = 0\n","    for train_index, test_index in kf.split(X_train,y_train):\n","         fold+=1\n","         xtr,xvl = X.loc[train_index],X.loc[test_index]\n","         ytr,yvl = y.loc[train_index],y.loc[test_index]\n","         clf.fit(xtr, np.ravel(ytr), cat_features=['Accident_Type_Code','Violations'],eval_set=(xvl,yvl))\n","         y_pred = clf.predict(xvl)\n","         accuracy = get_Model_score(yvl, y_pred)\n","         outcomes.append(accuracy)\n","         print(\"Fold {0} F1 Score: {1}\".format(fold, accuracy))     \n","    mean_outcome = np.mean(outcomes)\n","    print(\"Mean Accuracy: {0}\".format(mean_outcome)) \n","\n","cat_boost_clf = CatBoostClassifier(eval_metric='Accuracy',use_best_model=True,random_seed=2020)\n","run_kfold_stratified(cat_boost_clf,X_train,y_train)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vJkgZm4Bv90U","colab_type":"code","colab":{}},"source":[" from google.colab import files\n","  inv_cleanup_Severity = {\"Severity\":{v: k for k, v in cleanup_Severity['Severity'].items()}}\n","  predictions = clf.predict(test.drop(['Accident_ID'],axis=1))\n","  result = pd.DataFrame({'Accident_ID':test['Accident_ID'],'Severity':predictions})\n","  result.replace(inv_cleanup_Severity, inplace=True)\n","  result.to_csv(fileName + '.csv', index=False)\n","  files.download(fileName + '.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"auu1bo4pxZQX","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5lRdEtB1wpRH","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dN5_-0sgiHOt","colab_type":"code","colab":{}},"source":["def get_Model_score(y_test,y_pred):\n","  return 100*(f1_score(y_test,y_pred,average=\"weighted\"))\n","\n","from sklearn.metrics.scorer import make_scorer\n","from sklearn.model_selection import GridSearchCV\n","\n","param_grid = {'depth':[3,1,2,6,4,5,7,8,9,10],\n","        'iterations':[1000],\n","        'learning_rate':[0.03,0.001,0.01,0.1,0.2,0.3], \n","        'l2_leaf_reg':[3],\n","        'border_count':[32,5,10,20,50,100,200],\n","        'thread_count':[4]}\n","\n","my_scorer = make_scorer(get_Model_score, greater_is_better=True)\n","\n","catboost_clf = CatBoostClassifier(eval_metric='Accuracy',use_best_model=True,random_seed=2020)\n","\n","# Run the grid search\n","grid_obj_cat = GridSearchCV(catboost_clf, param_grid, scoring=my_scorer)\n","grid_obj_cat = grid_obj_cat.fit(X_train,y_train,cat_features=['Accident_Type_Code','Violations'],eval_set=(X_test,y_test))\n","\n","# Set the clf to the best combination of parameters\n","cat_grid_best_classifier = grid_obj_cat.best_estimator_"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"m3bWN0P3-FpK","colab_type":"text"},"source":["#### Keras Neural Network"]},{"cell_type":"code","metadata":{"id":"NbE2RrctG7IW","colab_type":"code","colab":{}},"source":["from keras.models import Sequential\n","from keras.layers import Dense\n","import tensorflow as tf\n","from keras.wrappers.scikit_learn import KerasClassifier\n","from keras.utils import np_utils\n","from sklearn.model_selection import cross_val_score\n","from sklearn.model_selection import KFold\n","\n","y_train_encoded = np_utils.to_categorical(y_train, num_classes=None)\n","y_test_encoded = np_utils.to_categorical(y_test, num_classes=None)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"J5i_gKrC2uK3","colab_type":"code","colab":{}},"source":["from keras import backend as K\n","\n","def recall_m(y_true, y_pred):\n","        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n","        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n","        recall = true_positives / (possible_positives + K.epsilon())\n","        return recall\n","\n","def precision_m(y_true, y_pred):\n","        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n","        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n","        precision = true_positives / (predicted_positives + K.epsilon())\n","        return precision\n","\n","def f1_m(y_true, y_pred):\n","    precision = precision_m(y_true, y_pred)\n","    recall = recall_m(y_true, y_pred)\n","    return 100*(2*((precision*recall)/(precision+recall+K.epsilon())))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"v3lZ3lvz4eRi","colab_type":"code","colab":{}},"source":["epochs = 10\n","\n","for activation in [None, 'sigmoid', 'tanh', 'relu']:\n","    model = Sequential()\n","    model.add(Dense(512, activation=activation, input_shape=(10,)))\n","    model.add(Dense(50, activation=activation))\n","    model.add(Dense(50, activation=activation))\n","    model.add(Dense(4, activation='sigmoid'))\n","    model.compile(loss='categorical_crossentropy',\n","              optimizer=RMSprop(),\n","              metrics=[f1_m])\n","    history = model.fit(X_train, y_train_encoded,\n","                    batch_size=10,\n","                    epochs=epochs,\n","                    verbose=1,\n","                    validation_data=(X_test, y_test_encoded))\n","    \n","    plt.plot(history.history['val_f1_m'])    \n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['None', 'sigmoid', 'tanh', 'relu'], loc='upper left')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2vywo_3z413g","colab_type":"text"},"source":["#### Tensorflow Model"]},{"cell_type":"code","metadata":{"id":"7igLwwxsG7Bc","colab_type":"code","colab":{}},"source":["import tensorflow as tf"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wxgZCWvt6eIa","colab_type":"code","colab":{}},"source":["from keras import backend as K\n","\n","def recall_m(y_true, y_pred):\n","        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n","        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n","        recall = true_positives / (possible_positives + K.epsilon())\n","        return recall\n","\n","def precision_m(y_true, y_pred):\n","        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n","        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n","        precision = true_positives / (predicted_positives + K.epsilon())\n","        return precision\n","\n","def f1_m(y_true, y_pred):\n","    precision = precision_m(y_true, y_pred)\n","    recall = recall_m(y_true, y_pred)\n","    return 100*(2*((precision*recall)/(precision+recall+K.epsilon())))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"iJoxhvoDG69Y","colab_type":"code","colab":{}},"source":["from keras import Sequential\n","from keras.layers import Dense\n","classier = Sequential()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eI6zL2GW5GRe","colab_type":"code","colab":{}},"source":["classifier = tf.keras.Sequential([\n","    tf.keras.layers.Dense(500 , activation = 'relu' , input_dim = 10),\n","    tf.keras.layers.Dense(300 , activation = 'relu'),\n","    tf.keras.layers.Dense(100 , activation = 'relu'),\n","    tf.keras.layers.Dense(50 , activation = 'relu'),\n","    tf.keras.layers.Dense(4, activation = 'softmax')\n","])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6tl19Y335JJ0","colab_type":"code","colab":{}},"source":["classifier.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6JIasFB35Lvt","colab_type":"code","colab":{}},"source":["classifier.compile(loss = 'sparse_categorical_crossentropy',\n","                 optimizer = 'adam',\n","                 metrics = [f1_m])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y9XH3PV75L4T","colab_type":"code","colab":{}},"source":["classifier.fit(X_train , y_train, batch_size = 16, epochs = 25 , validation_data = (X_test , y_test))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z3h3s8Jt5wYO","colab_type":"code","colab":{}},"source":["pred_2 = classifier.predict(test_x1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7sSGaLE56twj","colab_type":"code","colab":{}},"source":["from google.colab import files\n","inv_cleanup_Severity = {\"Severity\":{v: k for k, v in cleanup_Severity['Severity'].items()}}\n","predictions = classifier.predict(test.drop(['Accident_ID'],axis=1))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"cZCslQ2M7j6V","colab_type":"code","colab":{}},"source":["contents = []\n","for x in predictions:    \n","    contents.append(x.argmax())"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"IofT0wQV7FlQ","colab_type":"code","colab":{}},"source":["result = pd.DataFrame({'Accident_ID':test['Accident_ID'],'Severity':contents})\n","result.replace(inv_cleanup_Severity, inplace=True)\n","result.to_csv(\"tensorflow\" + '.csv', index=False)\n","files.download(\"tensorflow\" + '.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eO_KE70z7yjc","colab_type":"code","colab":{}},"source":["result['Severity'].value_counts()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ftIOzn8w57wg","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lIV8E1AM58In","colab_type":"text"},"source":["#### Adaptive Boosting"]},{"cell_type":"code","metadata":{"id":"6KymSkLy58st","colab_type":"code","colab":{}},"source":["from sklearn.ensemble import AdaBoostClassifier\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"n9ZpAuP158y1","colab_type":"code","colab":{}},"source":["from sklearn.ensemble import RandomForestClassifier\n","rf_classifier = RandomForestClassifier()\n","adb_clf = AdaBoostClassifier(base_estimator=rf_classifier, n_estimators=100)\n","adb_clf.fit(X_train,y_train)\n","val = adb_clf.predict(X_test)\n","get_model_performance(y_test,val)\n","print(100*(f1_score(y_test,val,average=\"weighted\")))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PiiNXLkY59IE","colab_type":"code","colab":{}},"source":["print_predictions(\"Adaptive Boosting Classifier\",test,adb_clf)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ihZ9gHdh59Ko","colab_type":"code","colab":{}},"source":["from sklearn.ensemble import BaggingClassifier\n","\n","\n","from sklearn.tree import DecisionTreeClassifier\n","dt = DecisionTreeClassifier(max_depth=4, min_samples_leaf=0.16, random_state=2020)\n","bc = BaggingClassifier(base_estimator=dt, n_estimators=300, n_jobs=-1)\n","bc.fit(X_train,y_train)\n","val = bc.predict(X_test)\n","get_model_performance(y_test,val)\n","print(100*(f1_score(y_test,val,average=\"weighted\")))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dGDq-jpt58xA","colab_type":"code","colab":{}},"source":["print_predictions(\"Bagging Classifier\",test,bc)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"pcOum1Uo58vc","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0lpoXaUI591m","colab_type":"text"},"source":["#### Extra Trees"]},{"cell_type":"code","metadata":{"id":"ibIdTqQzFTjW","colab_type":"code","colab":{}},"source":["from sklearn import model_selection\n","from sklearn.ensemble import ExtraTreesClassifier\n","num_trees = 1000\n","model = ExtraTreesClassifier(n_estimators=num_trees)\n","model.fit(X_train,y_train)\n","val = model.predict(X_test)\n","get_model_performance(y_test,val)\n","print(100*(f1_score(y_test,val,average=\"weighted\")))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9Ev05acjJSRC","colab_type":"text"},"source":["#### Light GBM With HyperOpt"]},{"cell_type":"code","metadata":{"id":"ZNcGBZEAJjA1","colab_type":"code","colab":{}},"source":["import warnings\n","import numpy as np\n","import pandas as pd\n","from lightgbm import LGBMClassifier\n","from sklearn.pipeline import Pipeline\n","from sklearn.impute import SimpleImputer\n","from sklearn.compose import ColumnTransformer\n","from hyperopt import fmin, tpe, hp, anneal, Trials\n","from sklearn.model_selection import train_test_split, cross_val_score\n","from sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder\n","warnings.filterwarnings('ignore')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UEjtN8lIFTno","colab_type":"code","colab":{}},"source":["target_encoder = LabelEncoder()\n","train['Severity'] = target_encoder.fit_transform(train['Severity'])\n","\n","X = train.drop(['Severity'], axis = 1)\n","y = train['Severity']\n","\n","numeric_features = ['Safety_Score', 'Days_Since_Inspection', 'Control_Metric', 'Total_Safety_Complaints', 'Turbulence_In_gforces', 'Cabin_Temperature', 'Max_Elevation', 'Adverse_Weather_Metric']\n","categorical_features = ['Accident_Type_Code', 'Violations']\n","\n","numeric_transformer = Pipeline(steps = [\n","    ('imputer', SimpleImputer(strategy = 'median'))])\n","\n","categorical_transformer = Pipeline(steps = [\n","    ('imputer', SimpleImputer(strategy = 'most_frequent')),\n","    ('onehot', OneHotEncoder(handle_unknown = 'ignore'))])\n","\n","preprocessor = ColumnTransformer(\n","    transformers = [\n","        ('num', numeric_transformer, numeric_features),\n","        ('cat', categorical_transformer, categorical_features)])\n","\n","\n","transformed_X = preprocessor.fit_transform(X)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qOmhjE1uJ07c","colab_type":"code","colab":{}},"source":["pd.DataFrame(transformed_X)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9PoA_sX3FTqo","colab_type":"code","colab":{}},"source":["def object_function(params, random_state = 40, cv = 3, X = transformed_X, y = y):\n","    params = {'n_estimators': int(params['n_estimators']), \n","              'max_depth': int(params['max_depth']), \n","             'learning_rate': params['learning_rate']}\n","\n","    estimator = LGBMClassifier(random_state = random_state, **params)\n","    error_score = 1 - np.mean(cross_val_score(estimator, X, y, cv = cv))\n","    return error_score\n","\n","space={'n_estimators': hp.quniform('n_estimators', 100, 2000, 1),\n","       'max_depth' : hp.quniform('max_depth', 2, 20, 1),\n","       'learning_rate': hp.loguniform('learning_rate', -5, 0)\n","      }\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OtRCDKvxFTyJ","colab_type":"code","colab":{}},"source":["trials = Trials()\n","random_state = 40\n","\n","best = fmin(fn = object_function,\n","            space = space,\n","            algo = tpe.suggest,\n","            max_evals = 100,\n","            trials = trials,\n","            rstate = np.random.RandomState(random_state))\n","\n","print('-' * 60)\n","print(best)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"30B91bdad1nE","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R5ajnRSXd1qa","colab_type":"code","colab":{}},"source":["from sklearn.ensemble import RandomForestClassifier\n","from hyperopt import fmin, tpe, hp, anneal, Trials,STATUS_OK\n","\n","space = hp.choice('classifier_type', [\n","    {\n","        'type': 'randomforest',\n","        'max_depth': hp.choice('max_depth', range(1,20)),\n","        'max_features': hp.choice('max_features', range(1,5)),\n","        'n_estimators': hp.choice('n_estimators', range(1,20)),\n","        'criterion': hp.choice('criterion', [\"gini\", \"entropy\"]),\n","        'scale': hp.choice('scale', [0, 1]),\n","        'normalize': hp.choice('normalize', [0, 1])\n","    },\n","])\n","\n","def hyperopt_train_test(params):\n","    t = params['type']\n","    del params['type']\n","    if t == 'randomforest':\n","      rf_classifier_hp = RandomForestClassifier()\n","    else:\n","        return 0\n","    rf_classifier_hp.fit(X_train, y_train)\n","    rf_predictions_hp = rf_classifier_hp.predict(X_test)\n","    return 100*(f1_score(y_test,rf_predictions_hp,average=\"weighted\"))\n","    \n","    "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NdCvDeJxjj2Y","colab_type":"code","colab":{}},"source":["print('new best: {} using {}'.format(50, 'params[]'))\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"pKeWzlwZhen7","colab_type":"code","colab":{}},"source":["count = 0\n","best = 0\n","def f(params):\n","    global best, count\n","    count += 1\n","    acc = hyperopt_train_test(params.copy())\n","    if acc > best:\n","        print('new best: {} using {}'.format(acc, params['type']))\n","        best = acc\n","    if count % 50 == 0:\n","        print('Iteration : {} and Accuracy {} using {}'.format(count,acc, params))\n","        # print('iters:', count, ', acc:', acc, 'using', params,sep=\"\")\n","    return {'loss': -acc, 'status': STATUS_OK}\n","trials = Trials()\n","best = fmin(f, space, algo=tpe.suggest, max_evals=1500, trials=trials)\n","print( 'best:',best ,sep=\"---\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YPWLkaHWFTvw","colab_type":"code","colab":{}},"source":["from sklearn import datasets\n","digits = datasets.load_digits()\n","X = digits.data\n","y = digits.target\n","print(X.shape, y.shape)\n","def hyperopt_train_test(params):\n","    t = params['type']\n","    del params['type']\n","    if t == 'svm':\n","        clf = SVC(**params)\n","    elif t == 'dtree':\n","        clf = DecisionTreeClassifier(**params)\n","    elif t == 'knn':\n","        clf = KNeighborsClassifier(**params)\n","    else:\n","        return 0\n","    return cross_val_score(clf, X, y).mean()\n","    \n","space = hp.choice('classifier_type', [\n","    {\n","        'type': 'naive_bayes',\n","        'alpha': hp.uniform('alpha', 0.0, 2.0)\n","    },\n","    {\n","        'type': 'svm',\n","        'C': hp.uniform('C', 0, 10.0),\n","        'kernel': hp.choice('kernel', ['linear', 'rbf']),\n","        'gamma': hp.uniform('gamma', 0, 20.0)\n","    },\n","    {\n","        'type': 'randomforest',\n","        'max_depth': hp.choice('max_depth', range(1,20)),\n","        'max_features': hp.choice('max_features', range(1,5)),\n","        'n_estimators': hp.choice('n_estimators', range(1,20)),\n","        'criterion': hp.choice('criterion', [\"gini\", \"entropy\"]),\n","        'scale': hp.choice('scale', [0, 1]),\n","        'normalize': hp.choice('normalize', [0, 1])\n","    },\n","    {\n","        'type': 'knn',\n","        'n_neighbors': hp.choice('knn_n_neighbors', range(1,50))\n","    }\n","])\n","count = 0\n","best = 0\n","def f(params):\n","    global best, count\n","    count += 1\n","    acc = hyperopt_train_test(params.copy())\n","    if acc > best:\n","        print('new best:', acc, 'using', params['type'])\n","        best = acc\n","    if count % 50 == 0:\n","        print('iters:', count, ', acc:', acc, 'using', params)\n","    return {'loss': -acc, 'status': STATUS_OK}\n","trials = Trials()\n","best = fmin(f, space, algo=tpe.suggest, max_evals=10, trials=trials)\n","print( 'best:',best ,sep=\"---\")"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"p3-eCmWSZkeA","colab_type":"text"},"source":["#### Gradient Boosting"]},{"cell_type":"code","metadata":{"id":"DD5X5ysLczuK","colab_type":"code","colab":{}},"source":["from sklearn.ensemble import GradientBoostingClassifier\n","from hyperopt import fmin, tpe, hp, anneal, Trials,STATUS_OK\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"y_fU4s1iZhpj","colab_type":"code","colab":{}},"source":["space = hp.choice('classifier_type', [\n","    {\n","    \"type\" : \"gradientBoosting\",\n","    \"loss\":hp.choice(\"loss\",['deviance']),\n","    \"learning_rate\": hp.choice('learning_rate',[0.01, 0.025, 0.05, 0.075, 0.1, 0.15, 0.2,0.001,0.0001]),\n","    \"min_samples_split\": hp.choice('min_samples_split',np.linspace(0.1, 0.5, 12)),\n","    \"min_samples_leaf\": hp.choice('min_samples_leaf',np.linspace(0.1, 0.5, 12)),\n","    \"max_depth\":hp.choice('max_depth',[3,5,8]),\n","    \"max_features\":hp.choice('max_features',[\"log2\",\"sqrt\",\"auto\",\"None\",4,5,6,7,8,9]),\n","    \"criterion\": hp.choice('criterion',[\"friedman_mse\", \"mae\",\"mse\"]),\n","    \"subsample\":hp.choice('subsample',[0.5, 0.618, 0.8, 0.85, 0.9, 0.95, 1.0]),\n","    'n_estimators': hp.choice('n_estimators', range(100,1500,100)),\n","    },\n","])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"j_0UM5nQaHFj","colab_type":"code","colab":{}},"source":["def hyperopt_train_test(params):\n","    t = params['type']\n","    del params['type']\n","    if t == 'gradientBoosting':\n","      gbc_hp = GradientBoostingClassifier()\n","    else:\n","        return 0\n","    gbc_hp.fit(X_train, y_train)\n","    gbc_hp_pred = gbc_hp.predict(X_test)\n","    return 100*(f1_score(y_test,gbc_hp_pred,average=\"weighted\"))\n","    "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oQf8fmyKaIay","colab_type":"code","colab":{}},"source":["count = 0\n","best = 0\n","def f(params):\n","    global best, count\n","    count += 1\n","    acc = hyperopt_train_test(params.copy())\n","    if acc > best:\n","        print('new best: {} using {}'.format(acc, params['type']))\n","    # if count % 50 == 0:\n","        print('Iteration : {} and Accuracy {} using {}'.format(count,acc, params))\n","        best = acc\n","        # print('iters:', count, ', acc:', acc, 'using', params,sep=\"\")\n","    return {'loss': -acc, 'status': STATUS_OK}\n","trials = Trials()\n","best = fmin(f, space, algo=tpe.suggest, max_evals=1500, trials=trials)\n","print( 'best:',best ,sep=\"---\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nWzudff4aIkr","colab_type":"code","colab":{}},"source":["gbc_hp_best_params = GradientBoostingClassifier(criterion= 'mse', learning_rate= 0.1, loss= 'deviance', max_depth= 8,max_features= 'log2', min_samples_leaf= 0.24545454545454548,min_samples_split= 0.42727272727272736, n_estimators= 1300, subsample= 0.618 )\n","gbc_hp_best_params.fit(X_train,y_train)\n","preds = gbc_hp_best_params.predict(X_test)\n","get_model_performance(y_test,preds)\n","print_predictions(\"GB Classifier\",test,gbc_hp_best_params)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5sYjT0bPLHlZ","colab_type":"code","colab":{}},"source":["print(100*(f1_score(y_test,preds,average=\"weighted\")))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QN_o1_hTaIhh","colab_type":"code","colab":{}},"source":["classifier_type= 0, criterion= 2, learning_rate= 4, loss= 0, max_depth= 2, max_features=0, min_samples_leaf= 4, min_samples_split= 9, n_estimators= 12, subsample= 1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tEVgKQkeaIfp","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"IaVXtemjaIdv","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}